name: Deploy To Environment
description: Build docker image and deploy it for each data pipeline.
inputs:
  aws-access-key-id:
    description: AWS_ACCESS_KEY_ID
    required: true
  aws-secret-access-key:
    description: AWS_SECRET_ACCCESS_KEY
    required: true
  docker-repo:
    description: ECR Docker repo to push to
    required: true
  env-name:
    description: One of 'prod', 'staging', or 'dev'
    required: true
  slack-webhook-url:
    description: Slack URL to post to
    required: true

runs:
  using: "composite"
  steps:
    - uses: mbta/actions/build-push-ecr@v1
      id: build-push
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        docker-repo: ${{ inputs.docker-repo }}
        dockerfile-path: ./python_src/
    - uses: mbta/actions/deploy-ecs@v1
      id: deploy-ingestion
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        ecs-cluster: lamp
        ecs-service: lamp-ingestion-${{ inputs.env-name }}
        docker-tag: ${{ steps.build-push.outputs.docker-tag }}
    - uses: mbta/actions/deploy-ecs@v1
      id: deploy-performance-manager
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        ecs-cluster: lamp
        ecs-service: lamp-rail-performance-manager-${{ inputs.env-name }}
        docker-tag: ${{ steps.build-push.outputs.docker-tag }}
    - uses: mbta/actions/notify-slack-deploy@v1
      if: ${{ !cancelled() }}
      with:
        webhook-url: ${{ inputs.slack-webhook-url }}
        job-status: ${{ job.status }}
