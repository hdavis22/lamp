"""initial prod schema

Revision ID: 5d9a7ee21ae5
Revises: 
Create Date: 2023-07-25 13:52:06.082838

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "5d9a7ee21ae5"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "metadata_log",
        sa.Column("pk_id", sa.Integer(), nullable=False),
        sa.Column("processed", sa.Boolean(), nullable=True),
        sa.Column("process_fail", sa.Boolean(), nullable=True),
        sa.Column("path", sa.String(length=256), nullable=False),
        sa.Column(
            "created_on",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("pk_id"),
        sa.UniqueConstraint("path"),
    )
    op.create_index(
        "ix_metadata_log_not_processed",
        "metadata_log",
        ["path"],
        unique=False,
        postgresql_where=sa.text("processed = false"),
    )

    op.create_table(
        "static_calendar",
        sa.Column("pk_id", sa.Integer(), nullable=False),
        sa.Column("service_id", sa.String(length=128), nullable=False),
        sa.Column("monday", sa.Boolean(), nullable=True),
        sa.Column("tuesday", sa.Boolean(), nullable=True),
        sa.Column("wednesday", sa.Boolean(), nullable=True),
        sa.Column("thursday", sa.Boolean(), nullable=True),
        sa.Column("friday", sa.Boolean(), nullable=True),
        sa.Column("saturday", sa.Boolean(), nullable=True),
        sa.Column("sunday", sa.Boolean(), nullable=True),
        sa.Column("start_date", sa.Integer(), nullable=False),
        sa.Column("end_date", sa.Integer(), nullable=False),
        sa.Column("static_version_key", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("pk_id"),
    )
    op.create_index(
        "ix_static_calendar_composite_1",
        "static_calendar",
        ["static_version_key", "service_id", "start_date", "end_date"],
        unique=False,
    )

    op.create_table(
        "static_calendar_dates",
        sa.Column("pk_id", sa.Integer(), nullable=False),
        sa.Column("service_id", sa.String(length=128), nullable=False),
        sa.Column("date", sa.Integer(), nullable=False),
        sa.Column("exception_type", sa.SmallInteger(), nullable=False),
        sa.Column("holiday_name", sa.String(length=128), nullable=True),
        sa.Column("static_version_key", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("pk_id"),
    )
    op.create_index(
        "ix_static_calendar_dates_composite_1",
        "static_calendar_dates",
        ["static_version_key", "service_id", "date"],
        unique=False,
    )

    op.create_table(
        "static_directions",
        sa.Column("pk_id", sa.Integer(), nullable=False),
        sa.Column("route_id", sa.String(length=60), nullable=False),
        sa.Column("direction_id", sa.Boolean(), nullable=True),
        sa.Column("direction", sa.String(length=30), nullable=False),
        sa.Column(
            "direction_destination", sa.String(length=60), nullable=False
        ),
        sa.Column("static_version_key", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("pk_id"),
    )
    op.create_index(
        "ix_static_directions_composite_1",
        "static_directions",
        ["static_version_key", "route_id", "direction_id"],
        unique=False,
    )

    op.create_table(
        "static_feed_info",
        sa.Column("pk_id", sa.Integer(), nullable=False),
        sa.Column("feed_start_date", sa.Integer(), nullable=False),
        sa.Column("feed_end_date", sa.Integer(), nullable=False),
        sa.Column("feed_version", sa.String(length=75), nullable=False),
        sa.Column("feed_active_date", sa.Integer(), nullable=False),
        sa.Column("static_version_key", sa.Integer(), nullable=False),
        sa.Column(
            "created_on",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("pk_id"),
        sa.UniqueConstraint("feed_version"),
        sa.UniqueConstraint("static_version_key"),
    )

    op.create_table(
        "static_routes",
        sa.Column("pk_id", sa.Integer(), nullable=False),
        sa.Column("route_id", sa.String(length=60), nullable=False),
        sa.Column("agency_id", sa.SmallInteger(), nullable=False),
        sa.Column("route_short_name", sa.String(length=60), nullable=True),
        sa.Column("route_long_name", sa.String(length=150), nullable=True),
        sa.Column("route_desc", sa.String(length=40), nullable=True),
        sa.Column("route_type", sa.SmallInteger(), nullable=False),
        sa.Column("route_sort_order", sa.Integer(), nullable=False),
        sa.Column("route_fare_class", sa.String(length=30), nullable=False),
        sa.Column("line_id", sa.String(length=30), nullable=True),
        sa.Column("static_version_key", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("pk_id"),
    )
    op.create_index(
        "ix_static_routes_composite_1",
        "static_routes",
        ["static_version_key", "route_id", "route_type"],
        unique=False,
    )

    op.create_table(
        "static_stop_times",
        sa.Column("pk_id", sa.Integer(), nullable=False),
        sa.Column("trip_id", sa.String(length=128), nullable=False),
        sa.Column("arrival_time", sa.Integer(), nullable=False),
        sa.Column("departure_time", sa.Integer(), nullable=False),
        sa.Column("schedule_travel_time_seconds", sa.Integer(), nullable=True),
        sa.Column(
            "schedule_headway_trunk_seconds", sa.Integer(), nullable=True
        ),
        sa.Column(
            "schedule_headway_branch_seconds", sa.Integer(), nullable=True
        ),
        sa.Column("stop_id", sa.String(length=30), nullable=False),
        sa.Column("stop_sequence", sa.SmallInteger(), nullable=False),
        sa.Column("static_version_key", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("pk_id"),
    )
    op.create_index(
        "ix_static_stop_times_composite_1",
        "static_stop_times",
        ["static_version_key", "trip_id", "stop_sequence"],
        unique=False,
    )
    op.create_index(
        "ix_static_stop_times_composite_2",
        "static_stop_times",
        ["static_version_key", "stop_id"],
        unique=False,
    )

    op.create_table(
        "static_stops",
        sa.Column("pk_id", sa.Integer(), nullable=False),
        sa.Column("stop_id", sa.String(length=128), nullable=False),
        sa.Column("stop_name", sa.String(length=128), nullable=False),
        sa.Column("stop_desc", sa.String(length=256), nullable=True),
        sa.Column("platform_code", sa.String(length=10), nullable=True),
        sa.Column("platform_name", sa.String(length=60), nullable=True),
        sa.Column("parent_station", sa.String(length=30), nullable=True),
        sa.Column("static_version_key", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("pk_id"),
    )
    op.create_index(
        "ix_static_stops_composite_1",
        "static_stops",
        ["static_version_key", "stop_id"],
        unique=False,
    )
    op.create_index(
        "ix_static_stops_composite_2",
        "static_stops",
        ["static_version_key", "parent_station", "stop_id"],
        unique=False,
    )

    op.create_table(
        "static_trips",
        sa.Column("pk_id", sa.Integer(), nullable=False),
        sa.Column("route_id", sa.String(length=60), nullable=False),
        sa.Column("branch_route_id", sa.String(length=60), nullable=True),
        sa.Column("trunk_route_id", sa.String(length=60), nullable=True),
        sa.Column("service_id", sa.String(length=60), nullable=False),
        sa.Column("trip_id", sa.String(length=128), nullable=False),
        sa.Column("direction_id", sa.Boolean(), nullable=True),
        sa.Column("block_id", sa.String(length=128), nullable=True),
        sa.Column("static_version_key", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("pk_id"),
    )
    op.create_index(
        "ix_static_trips_composite_1",
        "static_trips",
        ["static_version_key", "trip_id", "direction_id"],
        unique=False,
    )
    op.create_index(
        "ix_static_trips_composite_2",
        "static_trips",
        ["static_version_key", "branch_route_id"],
        unique=False,
    )
    op.create_index(
        "ix_static_trips_composite_3",
        "static_trips",
        ["static_version_key", "trunk_route_id"],
        unique=False,
    )

    op.create_table(
        "temp_event_compare",
        sa.Column("do_update", sa.Boolean(), nullable=True),
        sa.Column("do_insert", sa.Boolean(), nullable=True),
        sa.Column("pk_id", sa.Integer(), nullable=False),
        sa.Column("new_trip", sa.Boolean(), nullable=True),
        sa.Column("pm_trip_id", sa.Integer(), nullable=True),
        sa.Column("service_date", sa.Integer(), nullable=False),
        sa.Column("direction_id", sa.Boolean(), nullable=False),
        sa.Column("route_id", sa.String(length=60), nullable=False),
        sa.Column("start_time", sa.Integer(), nullable=False),
        sa.Column("vehicle_id", sa.String(length=60), nullable=False),
        sa.Column("stop_sequence", sa.SmallInteger(), nullable=True),
        sa.Column("stop_id", sa.String(length=60), nullable=False),
        sa.Column("parent_station", sa.String(length=60), nullable=False),
        sa.Column("vp_move_timestamp", sa.Integer(), nullable=True),
        sa.Column("vp_stop_timestamp", sa.Integer(), nullable=True),
        sa.Column("tu_stop_timestamp", sa.Integer(), nullable=True),
        sa.Column("trip_id", sa.String(length=128), nullable=True),
        sa.Column("vehicle_label", sa.String(length=128), nullable=True),
        sa.Column("vehicle_consist", sa.String(), nullable=True),
        sa.Column("static_version_key", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("pk_id"),
    )

    op.create_table(
        "vehicle_events",
        sa.Column("pm_event_id", sa.Integer(), nullable=False),
        sa.Column("service_date", sa.Integer(), nullable=False),
        sa.Column("pm_trip_id", sa.Integer(), nullable=False),
        sa.Column("stop_sequence", sa.SmallInteger(), nullable=True),
        sa.Column("stop_id", sa.String(length=60), nullable=False),
        sa.Column("parent_station", sa.String(length=60), nullable=False),
        sa.Column(
            "previous_trip_stop_pm_event_id", sa.Integer(), nullable=True
        ),
        sa.Column("next_trip_stop_pm_event_id", sa.Integer(), nullable=True),
        sa.Column("vp_move_timestamp", sa.Integer(), nullable=True),
        sa.Column("vp_stop_timestamp", sa.Integer(), nullable=True),
        sa.Column("tu_stop_timestamp", sa.Integer(), nullable=True),
        sa.Column("travel_time_seconds", sa.Integer(), nullable=True),
        sa.Column("dwell_time_seconds", sa.Integer(), nullable=True),
        sa.Column("headway_trunk_seconds", sa.Integer(), nullable=True),
        sa.Column("headway_branch_seconds", sa.Integer(), nullable=True),
        sa.Column(
            "updated_on",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("pm_event_id"),
    )
    op.create_index(
        "ix_vehicle_events_composite_1",
        "vehicle_events",
        ["service_date", "pm_trip_id", "parent_station"],
        unique=True,
    )
    op.create_index(
        "ix_vehicle_events_composite_2",
        "vehicle_events",
        ["service_date", "pm_trip_id", "stop_sequence"],
        unique=False,
    )
    op.create_index(
        "ix_vehicle_events_vp_not_null",
        "vehicle_events",
        ["pm_event_id"],
        unique=False,
        postgresql_where=sa.text(
            "vp_move_timestamp IS NOT NULL OR vp_stop_timestamp IS NOT NULL"
        ),
    )

    op.create_table(
        "vehicle_trips",
        sa.Column("pm_trip_id", sa.Integer(), nullable=False),
        sa.Column("service_date", sa.Integer(), nullable=False),
        sa.Column("route_id", sa.String(length=60), nullable=False),
        sa.Column("direction_id", sa.Boolean(), nullable=False),
        sa.Column("start_time", sa.Integer(), nullable=False),
        sa.Column("vehicle_id", sa.String(length=60), nullable=False),
        sa.Column("branch_route_id", sa.String(length=60), nullable=True),
        sa.Column("trunk_route_id", sa.String(length=60), nullable=True),
        sa.Column("stop_count", sa.SmallInteger(), nullable=True),
        sa.Column("trip_id", sa.String(length=128), nullable=True),
        sa.Column("vehicle_label", sa.String(length=128), nullable=True),
        sa.Column("vehicle_consist", sa.String(), nullable=True),
        sa.Column("direction", sa.String(length=30), nullable=True),
        sa.Column("direction_destination", sa.String(length=60), nullable=True),
        sa.Column("static_trip_id_guess", sa.String(length=128), nullable=True),
        sa.Column("static_start_time", sa.Integer(), nullable=True),
        sa.Column("static_stop_count", sa.SmallInteger(), nullable=True),
        sa.Column("first_last_station_match", sa.Boolean(), nullable=False),
        sa.Column("static_version_key", sa.Integer(), nullable=False),
        sa.Column(
            "updated_on",
            sa.TIMESTAMP(),
            server_default=sa.text("now()"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["static_version_key"],
            ["static_feed_info.static_version_key"],
        ),
        sa.PrimaryKeyConstraint("pm_trip_id"),
        sa.UniqueConstraint(
            "service_date",
            "route_id",
            "direction_id",
            "start_time",
            "vehicle_id",
            name="vehicle_trips_unique_trip",
        ),
    )
    op.create_index(
        "ix_vehicle_trips_composite_1",
        "vehicle_trips",
        ["route_id", "direction_id", "vehicle_id"],
        unique=False,
    )

    create_update_on_function = """
        CREATE OR REPLACE FUNCTION update_modified_columns() 
        RETURNS TRIGGER AS $$ 
        BEGIN 
        NEW.updated_on = CURRENT_TIMESTAMP; 
        RETURN NEW;
        END; $$ LANGUAGE plpgsql
    """
    op.execute(create_update_on_function)

    for table in [
        "vehicle_events",
        "vehicle_trips",
    ]:
        trigger_name = f"update_{table}_modified".lower()
        create_trigger = """
            CREATE TRIGGER %s BEFORE UPDATE ON "%s" 
            FOR EACH ROW EXECUTE PROCEDURE update_modified_columns();
        """ % (
            trigger_name,
            table,
        )
        op.execute(create_trigger)

    create_feed_info_insert_function = """
        CREATE OR REPLACE FUNCTION insert_feed_info() RETURNS TRIGGER AS $$ 
        BEGIN 
            IF NEW.feed_version ~ '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\+\d{2}:\d{2}' THEN
                NEW.feed_active_date := replace((substring(NEW.feed_version from '\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\+\d{2}:\d{2}')::timestamptz at time zone 'US/Eastern')::date::text,'-','')::integer;
            ELSE
                NEW.feed_active_date := NEW.feed_start_date;
            END IF;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """
    op.execute(create_feed_info_insert_function)

    create_insert_into_feed_info_trigger = """
        CREATE TRIGGER insert_into_feed_info BEFORE INSERT ON static_feed_info 
        FOR EACH ROW EXECUTE PROCEDURE insert_feed_info();
    """
    op.execute(create_insert_into_feed_info_trigger)

    create_red_is_ashmont_branch_func = """
        CREATE OR REPLACE FUNCTION red_is_ashmont_branch(p_trip_id varchar, p_fk_ts int) RETURNS boolean AS $$ 
        DECLARE
            is_ashmont boolean;
        BEGIN 
            SELECT
                true
            INTO
                is_ashmont
            FROM 
                static_stop_times sst
            WHERE 
                sst.trip_id = p_trip_id
                AND sst.static_version_key = p_fk_ts
                AND sst.stop_id IN ('70087', '70088', '70089', '70090', '70091', '70092', '70093', '70094', '70085', '70086')
            LIMIT 1
            ;

            IF FOUND THEN
                RETURN true;
            ELSE
                RETURN false;
            END IF;
        END;
        $$ LANGUAGE plpgsql;
    """
    op.execute(create_red_is_ashmont_branch_func)

    create_red_is_braintree_branch_func = """
        CREATE OR REPLACE FUNCTION red_is_braintree_branch(p_trip_id varchar, p_fk_ts int) RETURNS boolean AS $$ 
        DECLARE	
            is_braintree boolean;
        BEGIN 
            SELECT
                true
            INTO
                is_braintree
            FROM 
                static_stop_times sst
            WHERE 
                sst.trip_id = p_trip_id
                AND sst.static_version_key = p_fk_ts
                AND sst.stop_id IN ('70097', '70098', '70099', '70100', '70101', '70102', '70103', '70104', '70105', '70095', '70096')
            LIMIT 1
            ;

            IF FOUND THEN
                RETURN true;
            ELSE
                RETURN false;
            END IF;
        END;
        $$ LANGUAGE plpgsql;
    """
    op.execute(create_red_is_braintree_branch_func)

    create_insert_static_trips_branch_trunk = """
        CREATE OR REPLACE FUNCTION insert_static_trips_branch_trunk() RETURNS TRIGGER AS $$ 
        BEGIN 
            IF NEW.route_id ~ 'Green-' THEN
                NEW.branch_route_id := NEW.route_id;
                NEW.trunk_route_id := 'Green';
            ELSEIF NEW.route_id = 'Red' THEN
                IF red_is_braintree_branch(NEW.trip_id, NEW.static_version_key) THEN
                    NEW.branch_route_id := 'Red-B';
                ELSEIF red_is_ashmont_branch(NEW.trip_id, NEW.static_version_key) THEN
                    NEW.branch_route_id := 'Red-A';
                ELSE
                    NEW.branch_route_id := null;
                END IF;
                NEW.trunk_route_id := NEW.route_id;
            ELSE
                NEW.branch_route_id := null;
                NEW.trunk_route_id := NEW.route_id;
            END IF;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """
    op.execute(create_insert_static_trips_branch_trunk)

    create_static_trips_create_branch_trunk = """
        CREATE TRIGGER static_trips_create_branch_trunk BEFORE INSERT ON static_trips 
        FOR EACH ROW EXECUTE PROCEDURE insert_static_trips_branch_trunk();
    """
    op.execute(create_static_trips_create_branch_trunk)

    create_rt_braintree_function = """
        CREATE OR REPLACE FUNCTION rt_red_is_braintree_branch(p_trip_id int) RETURNS boolean AS $$ 
        DECLARE
            found_check bool;
        BEGIN 
            SELECT
                true
            INTO
                found_check
            FROM 
                vehicle_events ve
            WHERE 
                ve.pm_trip_id = p_trip_id
                AND ve.stop_id IN ('70097', '70098', '70099', '70100', '70101', '70102', '70103', '70104', '70105', '70095', '70096')
            LIMIT 1
            ;
            IF FOUND THEN
                RETURN true;
            ELSE
                RETURN false;
            END IF;
        END;
        $$ LANGUAGE plpgsql;
    """
    op.execute(create_rt_braintree_function)

    create_rt_ashmont_function = """
        CREATE OR REPLACE FUNCTION rt_red_is_ashmont_branch(p_trip_id int) RETURNS boolean AS $$ 
        DECLARE
            found_check bool;
        BEGIN 
            SELECT
                true
            INTO
                found_check
            FROM 
                vehicle_events ve
            WHERE 
                ve.pm_trip_id = p_trip_id
                AND ve.stop_id IN ('70087', '70088', '70089', '70090', '70091', '70092', '70093', '70094', '70085', '70086')
            LIMIT 1
            ;
            IF FOUND THEN
                RETURN true;
            ELSE
                RETURN false;
            END IF;
        END;
        $$ LANGUAGE plpgsql;
    """
    op.execute(create_rt_ashmont_function)

    create_get_rt_branch_trunk_id = """
        CREATE OR REPLACE FUNCTION update_rt_branch_trunk_id() RETURNS TRIGGER AS $$ 
        BEGIN 
            IF NEW.route_id ~ 'Green-' THEN
                NEW.branch_route_id := NEW.route_id;
                NEW.trunk_route_id := 'Green';
            ELSEIF NEW.route_id = 'Red' THEN
                IF rt_red_is_braintree_branch(NEW.pm_trip_id) THEN
                    NEW.branch_route_id := 'Red-B';
                ELSEIF rt_red_is_ashmont_branch(NEW.pm_trip_id) THEN
                    NEW.branch_route_id := 'Red-A';
                ELSE
                    NEW.branch_route_id := null;
                END IF;
                NEW.trunk_route_id := NEW.route_id;
            ELSE
                NEW.branch_route_id := null;
                NEW.trunk_route_id := NEW.route_id;
            END IF;
            RETURN NEW;
        END;
        $$ LANGUAGE plpgsql;
    """
    op.execute(create_get_rt_branch_trunk_id)

    create_trigger = """
        CREATE TRIGGER rt_trips_update_branch_trunk BEFORE UPDATE ON vehicle_trips 
        FOR EACH ROW EXECUTE PROCEDURE update_rt_branch_trunk_id();
    """
    op.execute(create_trigger)

    create_service_id_by_date_and_route = """
        CREATE OR REPLACE VIEW service_id_by_date_and_route AS 
        WITH mod_feed_dates AS (
            SELECT 
                feed_start_date::text::date AS start_date,
                lead(feed_start_date,1,replace(CURRENT_DATE::text, '-', '')::integer) OVER (ORDER BY feed_start_date)::text::date - 1 AS end_date,
                static_version_key
            FROM public.static_feed_info
        ), sd_match AS (
            SELECT 
                replace(mod_sd::date::text, '-', '')::integer AS service_date,
                mod_feed_dates.static_version_key
            FROM mod_feed_dates,
                generate_series(mod_feed_dates.start_date, mod_feed_dates.end_date, '1 day') AS mod_sd
        ), static_cal AS (
            SELECT
                service_id, 
                start_date::text::date AS start_date, 
                end_date::text::date AS end_date,
                static_version_key,
                monday,
                tuesday,
                wednesday,
                thursday,
                friday,
                saturday,
                sunday
            FROM 
                public.static_calendar
            WHERE 
                public.static_calendar.static_version_key >= (SELECT min(static_version_key) FROM public.static_calendar_dates)
        ), service_ids AS (
            SELECT
                static_cal.service_id,
                replace(new_sd::date::text, '-', '')::integer AS service_date,
                static_cal.static_version_key
            FROM static_cal,
                generate_series(static_cal.start_date, static_cal.end_date, '1 day') AS new_sd
            WHERE 
                (extract(dow from new_sd) = 0 AND static_cal.sunday)
                OR (extract(dow from new_sd) = 1 AND static_cal.monday)
                OR (extract(dow from new_sd) = 2 AND static_cal.tuesday)
                OR (extract(dow from new_sd) = 3 AND static_cal.wednesday)
                OR (extract(dow from new_sd) = 4 AND static_cal.thursday)
                OR (extract(dow from new_sd) = 5 AND static_cal.friday)
                OR (extract(dow from new_sd) = 6 AND static_cal.saturday)
        ), service_ids_special AS (
            SELECT 
                scd.service_id,
                scd."date" AS service_date,
                scd.static_version_key
            FROM 
                public.static_calendar_dates scd
            WHERE 
                exception_type = 1
        ), service_ids_exclude AS (
            SELECT 
                scd.service_id,
                scd."date" AS service_date,
                scd.static_version_key,
                true AS to_exclude
            FROM 
                public.static_calendar_dates scd
            WHERE 
                exception_type = 2
        ), all_service_ids AS (
            SELECT 
                service_id,
                service_date,
                static_version_key
            FROM 
                service_ids
            UNION
            SELECT
                service_id,
                service_date,
                static_version_key
            FROM 
                service_ids_special
        )
        SELECT
            st.route_id,
            a_sid.service_id,
            a_sid.service_date,
            a_sid.static_version_key
        FROM 
            all_service_ids a_sid
        FULL OUTER JOIN
            service_ids_exclude e_sid
        ON 
            a_sid.service_id = e_sid.service_id
            AND a_sid.service_date = e_sid.service_date
            AND a_sid.static_version_key = e_sid.static_version_key
        JOIN sd_match
        ON
            sd_match.static_version_key = a_sid.static_version_key
            AND sd_match.service_date = a_sid.service_date
        JOIN 
            public.static_trips st 
        ON
            a_sid.service_id = st.service_id 
            AND a_sid.static_version_key = st.static_version_key
        WHERE
            e_sid.to_exclude IS null
            AND st.route_id IN ('Red', 'Mattapan', 'Orange', 'Green-B', 'Green-C', 'Green-D', 'Green-E', 'Blue')
        GROUP BY
            st.route_id,
            a_sid.service_id,
            a_sid.service_date,
            a_sid.static_version_key
        ;
    """
    op.execute(create_service_id_by_date_and_route)

    create_static_service_id_lookup = """
        CREATE OR REPLACE VIEW static_service_id_lookup AS 
        WITH mod_feed_dates AS (
            SELECT 
                feed_start_date::text::date AS start_date,
                feed_end_date::text::date AS end_date,
                static_version_key
            FROM public.static_feed_info
        ), sd_match AS (
            SELECT 
                replace(mod_sd::date::text, '-', '')::integer AS service_date,
                mod_feed_dates.static_version_key
            FROM mod_feed_dates,
                generate_series(mod_feed_dates.start_date, mod_feed_dates.end_date, '1 day') AS mod_sd
        ), static_cal AS (
            SELECT
                service_id, 
                start_date::text::date AS start_date, 
                end_date::text::date AS end_date,
                static_version_key,
                monday,
                tuesday,
                wednesday,
                thursday,
                friday,
                saturday,
                sunday
            FROM 
                public.static_calendar
            WHERE 
                public.static_calendar.static_version_key >= (SELECT min(static_version_key) FROM public.static_calendar_dates)
        ), service_ids AS (
            SELECT
                static_cal.service_id,
                replace(new_sd::date::text, '-', '')::integer AS service_date,
                static_cal.static_version_key
            FROM static_cal,
                generate_series(static_cal.start_date, static_cal.end_date, '1 day') AS new_sd
            WHERE 
                (extract(dow from new_sd) = 0 AND static_cal.sunday)
                OR (extract(dow from new_sd) = 1 AND static_cal.monday)
                OR (extract(dow from new_sd) = 2 AND static_cal.tuesday)
                OR (extract(dow from new_sd) = 3 AND static_cal.wednesday)
                OR (extract(dow from new_sd) = 4 AND static_cal.thursday)
                OR (extract(dow from new_sd) = 5 AND static_cal.friday)
                OR (extract(dow from new_sd) = 6 AND static_cal.saturday)
        ), service_ids_special AS (
            SELECT 
                scd.service_id,
                scd."date" AS service_date,
                scd.static_version_key
            FROM 
                public.static_calendar_dates scd
            WHERE 
                exception_type = 1
        ), service_ids_exclude AS (
            SELECT 
                scd.service_id,
                scd."date" AS service_date,
                scd.static_version_key,
                true AS to_exclude
            FROM 
                public.static_calendar_dates scd
            WHERE 
                exception_type = 2
        ), all_service_ids AS (
            SELECT 
                service_id,
                service_date,
                static_version_key
            FROM 
                service_ids
            UNION
            SELECT
                service_id,
                service_date,
                static_version_key
            FROM 
                service_ids_special
        )
        SELECT
            st.route_id,
            a_sid.service_id,
            a_sid.service_date,
            a_sid.static_version_key
        FROM 
            all_service_ids a_sid
        FULL OUTER JOIN
            service_ids_exclude e_sid
        ON 
            a_sid.service_id = e_sid.service_id
            AND a_sid.service_date = e_sid.service_date
            AND a_sid.static_version_key = e_sid.static_version_key
        JOIN sd_match
        ON
            sd_match.static_version_key = a_sid.static_version_key
            AND sd_match.service_date = a_sid.service_date
        JOIN 
            public.static_trips st 
        ON
            a_sid.service_id = st.service_id 
            AND a_sid.static_version_key = st.static_version_key
        WHERE
            e_sid.to_exclude IS null
        GROUP BY
            st.route_id,
            a_sid.service_id,
            a_sid.service_date,
            a_sid.static_version_key
        ;
    """
    op.execute(create_static_service_id_lookup)

    create_opmi_view = """
        CREATE OR REPLACE VIEW opmi_all_rt_fields_joined AS 
        SELECT
            vt.service_date
            , ve.pm_trip_id
            , ve.stop_sequence
            , ve.stop_id
            , prev_ve.stop_id as previous_stop_id
            , ve.parent_station
            , prev_ve.parent_station as previous_parent_station
            , ve.vp_move_timestamp as previous_stop_departure_timestamp
            , COALESCE(ve.vp_stop_timestamp,  ve.tu_stop_timestamp) as stop_arrival_timestamp
            , COALESCE(ve.vp_stop_timestamp,  ve.tu_stop_timestamp) + ve.dwell_time_seconds as stop_departure_timestamp
            , vt.direction_id
            , vt.route_id
            , vt.branch_route_id
            , vt.trunk_route_id
            , vt.start_time
            , vt.vehicle_id
            , vt.stop_count
            , vt.trip_id
            , vt.vehicle_label
            , vt.vehicle_consist
            , vt.direction
            , vt.direction_destination
            , vt.static_trip_id_guess
            , vt.static_start_time
            , vt.static_stop_count
            , vt.first_last_station_match
            , vt.static_version_key
            , ve.travel_time_seconds
            , ve.dwell_time_seconds
            , ve.headway_trunk_seconds
            , ve.headway_branch_seconds
            , ve.updated_on
        FROM 
            vehicle_events ve
        LEFT JOIN
            vehicle_trips vt
        ON 
            ve.pm_trip_id = vt.pm_trip_id
        LEFT JOIN
            vehicle_events prev_ve
        ON
            ve.pm_event_id = prev_ve.previous_trip_stop_pm_event_id
        WHERE
            ve.vp_stop_timestamp IS NOT null
            OR ve.vp_move_timestamp IS NOT null
        ;
    """
    op.execute(create_opmi_view)


def downgrade() -> None:
    drop_opmi_all_rt_fields_joined = (
        "DROP VIEW IF EXISTS opmi_all_rt_fields_joined;"
    )
    op.execute(drop_opmi_all_rt_fields_joined)

    drop_static_service_id_lookup = (
        "DROP VIEW IF EXISTS static_service_id_lookup;"
    )
    op.execute(drop_static_service_id_lookup)

    drop_service_id_by_date_and_route = (
        "DROP VIEW IF EXISTS service_id_by_date_and_route;"
    )
    op.execute(drop_service_id_by_date_and_route)

    drop_trigger = (
        "DROP TRIGGER IF EXISTS rt_trips_update_branch_trunk ON vehicle_trips;"
    )
    op.execute(drop_trigger)

    drop_function = (
        "DROP function if EXISTS public.update_rt_branch_trunk_id();"
    )
    op.execute(drop_function)

    drop_function = "DROP function if EXISTS public.rt_red_is_ashmont_branch();"
    op.execute(drop_function)

    drop_function = (
        "DROP function if EXISTS public.rt_red_is_braintree_branch();"
    )
    op.execute(drop_function)

    drop_trigger = "DROP TRIGGER IF EXISTS static_trips_create_branch_trunk ON static_trips;"
    op.execute(drop_trigger)

    drop_function = "DROP function IF EXISTS public.red_is_braintree_branch();"
    op.execute(drop_function)

    drop_function = "DROP function IF EXISTS public.red_is_ashmont_branch();"
    op.execute(drop_function)

    drop_function = (
        "DROP function IF EXISTS public.insert_static_trips_branch_trunk();"
    )
    op.execute(drop_function)

    drop_trigger = (
        "DROP TRIGGER IF EXISTS insert_into_feed_info ON static_feed_info;"
    )
    op.execute(drop_trigger)
    drop_function = "DROP function IF EXISTS public.insert_feed_info();"
    op.execute(drop_function)

    for table in [
        "vehicle_events",
        "vehicle_trips",
    ]:
        trigger_name = f"update_{table}_modified".lower()
        drop_trigger = f"DROP TRIGGER IF EXISTS {trigger_name} on {table};"
        op.execute(drop_trigger)

    drop_update_on_and_triggers = (
        "DROP function if EXISTS public.update_modified_columns();"
    )
    op.execute(drop_update_on_and_triggers)

    op.drop_index("ix_vehicle_trips_composite_1", table_name="vehicle_trips")
    op.drop_table("vehicle_trips")

    op.drop_index("ix_vehicle_events_vp_not_null", table_name="vehicle_events")
    op.drop_index("ix_vehicle_events_composite_2", table_name="vehicle_events")
    op.drop_index("ix_vehicle_events_composite_1", table_name="vehicle_events")
    op.drop_table("vehicle_events")

    op.drop_table("temp_event_compare")

    op.drop_index("ix_static_trips_composite_3", table_name="static_trips")
    op.drop_index("ix_static_trips_composite_2", table_name="static_trips")
    op.drop_index("ix_static_trips_composite_1", table_name="static_trips")
    op.drop_table("static_trips")

    op.drop_index("ix_static_stops_composite_2", table_name="static_stops")
    op.drop_index("ix_static_stops_composite_1", table_name="static_stops")
    op.drop_table("static_stops")

    op.drop_index(
        "ix_static_stop_times_composite_2", table_name="static_stop_times"
    )
    op.drop_index(
        "ix_static_stop_times_composite_1", table_name="static_stop_times"
    )
    op.drop_table("static_stop_times")

    op.drop_index("ix_static_routes_composite_1", table_name="static_routes")
    op.drop_table("static_routes")

    op.drop_table("static_feed_info")

    op.drop_index(
        "ix_static_directions_composite_1", table_name="static_directions"
    )
    op.drop_table("static_directions")

    op.drop_index(
        "ix_static_calendar_dates_composite_1",
        table_name="static_calendar_dates",
    )
    op.drop_table("static_calendar_dates")

    op.drop_index(
        "ix_static_calendar_composite_1", table_name="static_calendar"
    )
    op.drop_table("static_calendar")

    op.drop_index("ix_metadata_log_not_processed", table_name="metadata_log")
    op.drop_table("metadata_log")
    # ### end Alembic commands ###
